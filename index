<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>โปรแกรมคำนวณระยะเวลาคนเดินข้ามถนน (ปรับปรุง)</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Sarabun:wght@400;700&display=swap" rel="stylesheet">
    <style>
        body {
            font-family: 'Sarabun', sans-serif;
        }
        .form-input, .form-select, .form-radio {
            border-color: #D1D5DB;
        }
        .form-input:focus, .form-select:focus, .form-radio:focus {
            --tw-ring-color: #3b82f6;
            border-color: #3b82f6;
        }
        .btn-primary {
            background-color: #2563EB;
            color: white;
            transition: background-color 0.3s;
        }
        .btn-primary:hover {
            background-color: #1D4ED8;
        }
        .btn-secondary {
            background-color: #6B7280;
            color: white;
            transition: background-color: 0.3s;
        }
        .btn-secondary:hover {
            background-color: #4B5563;
        }
        #road-visual {
            background-color: #4B5563; /* gray-600 */
            transition: all 0.5s ease-in-out;
            position: relative;
            overflow: hidden;
            display: flex;
            flex-direction: column; 
        }
        .lane-marking-dashed {
            border-bottom: 5px dashed white;
        }
        .center-divider-solid {
            background-color: #F97316; /* orange-500 */
            min-height: 5px;
            width: 100%;
        }
        .median-island-visual {
            background-color: #16A34A; /* green-600 */
            background-image: repeating-linear-gradient(45deg, #15803D, #15803D 10px, #16A34A 10px, #16A34A 20px);
            width: 100%;
            border-top: 2px solid #a3a3a3;
            border-bottom: 2px solid #a3a3a3;
            flex-shrink: 0;
            flex-basis: 25%;
        }
        .traffic-flow {
            width: 100%;
            display: flex;
            flex-direction: column;
            justify-content: space-around;
        }
        /* -- Styles for Crosswalk & Stop Lines -- */
        #crosswalk-container {
            position: absolute;
            top: 0;
            left: 50%;
            width: 20%; /* Reduced width of the crosswalk area */
            height: 100%;
            transform: translateX(-50%);
            display: flex;
            flex-direction: column; /* To stack stripes vertically */
            justify-content: space-between;
        }
        .crosswalk-stripe {
            width: 100%;
            background-color: rgba(255, 255, 255, 0.9);
        }
        .stop-line-visual {
            position: absolute;
            top: 50%;
            transform: translateY(-50%);
            width: 5px; /* Vertical line */
            height: 100%;
            background-color: rgba(255, 255, 255, 0.9);
        }
        #stop-line-left {
            left: calc(50% - 10% - 8px); /* Adjusted for new width */
        }
        #stop-line-right {
            right: calc(50% - 10% - 8px); /* Adjusted for new width */
        }
        .clipped-by-crosswalk {
            /* This mask creates a transparent hole in the middle */
            --mask-start: calc(50% - 10% - 5px); /* Stop line position */
            --mask-end:   calc(50% + 10% + 5px); /* Stop line position */
            -webkit-mask-image: linear-gradient(to right, 
                black 0, 
                black var(--mask-start), 
                transparent var(--mask-start), 
                transparent var(--mask-end), 
                black var(--mask-end), 
                black 100%);
            mask-image: linear-gradient(to right, 
                black 0, 
                black var(--mask-start), 
                transparent var(--mask-start), 
                transparent var(--mask-end), 
                black var(--mask-end), 
                black 100%);
        }
        /* Styles for explanation section */
        details > summary {
            list-style: none;
        }
        details > summary::-webkit-details-marker {
            display: none;
        }
        details[open] summary .arrow-down {
            transform: rotate(180deg);
        }
        /* Animation Styles */
        .collapsible {
            display: grid;
            grid-template-rows: 0fr;
            transition: grid-template-rows 0.4s ease-out;
        }
        .collapsible.open {
            grid-template-rows: 1fr;
        }
        .collapsible-content {
            overflow: hidden;
        }
        /* Unit Button Styles */
        .unit-btn {
            transition: background-color 0.2s, color 0.2s;
        }
    </style>
</head>
<body class="bg-gray-50 text-gray-800 flex items-center justify-center min-h-screen p-4">

    <div class="w-full max-w-6xl bg-white p-6 sm:p-8 rounded-2xl shadow-lg">
        <h1 class="text-2xl sm:text-3xl font-bold text-center text-gray-900 mb-6">เครื่องคำนวณระยะเวลาคนเดินข้ามถนน</h1>

        <!-- Visual Aid -->
        <div class="mb-6">
            <h3 class="font-bold text-lg mb-2 text-gray-700">ภาพประกอบถนน (ขับชิดซ้าย)</h3>
            <div id="road-visual-container" class="w-full h-32 bg-gray-200 rounded-lg flex items-center justify-center p-2">
                <div id="road-visual" class="h-full rounded-md shadow-inner" style="width: 80%;">
                    <!-- Visuals generated by JS -->
                </div>
            </div>
        </div>

        <div class="grid grid-cols-1 lg:grid-cols-5 gap-x-12 gap-y-8">
            <!-- Input Section -->
            <form id="crossing-form" class="lg:col-span-3 space-y-6">
                <h2 class="text-xl font-bold text-gray-800 border-b pb-2">1. กรอกข้อมูล</h2>
                
                <!-- Unit Toggle -->
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-2">หน่วยวัด:</label>
                    <div class="inline-flex rounded-md shadow-sm" role="group">
                        <button type="button" id="unit-btn-meters" data-unit="meters" class="unit-btn rounded-l-lg px-4 py-2 text-sm font-medium border border-gray-200">เมตร</button>
                        <button type="button" id="unit-btn-feet" data-unit="feet" class="unit-btn -ml-px rounded-r-lg px-4 py-2 text-sm font-medium border border-gray-200">ฟุต</button>
                    </div>
                </div>

                <!-- Road Info Section -->
                <div class="space-y-4 p-4 border rounded-lg bg-gray-50">
                    <h3 class="font-semibold text-lg text-gray-800">ข้อมูลถนน</h3>
                    <!-- Stage 1 & 2 Grid -->
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <!-- Stage 1 -->
                        <div class="p-3 border rounded-md bg-white space-y-2">
                            <h4 class="font-semibold text-gray-700">ฝั่งที่ 1 (ฝั่งแรกที่ข้าม)</h4>
                            <div class="flex gap-4">
                                <label class="flex items-center text-xs"><input type="radio" name="stage1-input-type" value="lanes" class="form-radio" checked> <span class="ml-1">ตามจำนวนช่อง</span></label>
                                <label class="flex items-center text-xs"><input type="radio" name="stage1-input-type" value="direct" class="form-radio"> <span class="ml-1">ระบุความกว้าง</span></label>
                            </div>
                            <div class="collapsible" id="stage1-lanes-wrapper">
                                <div class="collapsible-content space-y-3 pt-2">
                                    <div>
                                        <label for="stage1-num-lanes" class="text-sm font-medium text-gray-600">จำนวนช่อง</label>
                                        <input type="number" id="stage1-num-lanes" value="2" min="1" step="1" class="form-input mt-1 block w-full rounded-md shadow-sm p-2 text-sm">
                                    </div>
                                    <div>
                                        <label for="stage1-lane-width" class="text-sm font-medium text-gray-600">ความกว้างต่อช่อง (<span class="unit-label">เมตร</span>)</label>
                                        <input type="number" id="stage1-lane-width" value="3.5" min="1" step="0.1" class="form-input mt-1 block w-full rounded-md shadow-sm p-2 text-sm">
                                    </div>
                                </div>
                            </div>
                            <div class="collapsible" id="stage1-direct-wrapper">
                                <div class="collapsible-content space-y-3 pt-2">
                                    <div>
                                         <label for="stage1-vis-lanes" class="text-sm font-medium text-gray-600">จำนวนช่อง (สำหรับภาพ)</label>
                                         <input type="number" id="stage1-vis-lanes" value="2" min="1" step="1" class="form-input mt-1 block w-full rounded-md shadow-sm p-2 text-sm">
                                    </div>
                                    <div>
                                         <label for="stage1-width" class="text-sm font-medium text-gray-600">ความกว้างรวม (<span class="unit-label">เมตร</span>)</label>
                                         <input type="number" id="stage1-width" placeholder="ระบุความกว้างรวม" class="form-input mt-1 block w-full rounded-md shadow-sm p-2 text-sm">
                                    </div>
                                </div>
                            </div>
                        </div>
                        <!-- Stage 2 -->
                        <div class="p-3 border rounded-md bg-white space-y-2">
                            <h4 class="font-semibold text-gray-700">ฝั่งที่ 2 (ฝั่งที่สอง)</h4>
                             <div class="flex gap-4">
                                <label class="flex items-center text-xs"><input type="radio" name="stage2-input-type" value="lanes" class="form-radio" checked> <span class="ml-1">ตามจำนวนช่อง</span></label>
                                <label class="flex items-center text-xs"><input type="radio" name="stage2-input-type" value="direct" class="form-radio"> <span class="ml-1">ระบุความกว้าง</span></label>
                            </div>
                            <div class="collapsible" id="stage2-lanes-wrapper">
                                <div class="collapsible-content space-y-3 pt-2">
                                    <div>
                                        <label for="stage2-num-lanes" class="text-sm font-medium text-gray-600">จำนวนช่อง</label>
                                        <input type="number" id="stage2-num-lanes" value="2" min="1" step="1" class="form-input mt-1 block w-full rounded-md shadow-sm p-2 text-sm">
                                    </div>
                                    <div>
                                        <label for="stage2-lane-width" class="text-sm font-medium text-gray-600">ความกว้างต่อช่อง (<span class="unit-label">เมตร</span>)</label>
                                        <input type="number" id="stage2-lane-width" value="3.5" min="1" step="0.1" class="form-input mt-1 block w-full rounded-md shadow-sm p-2 text-sm">
                                    </div>
                                </div>
                            </div>
                            <div class="collapsible" id="stage2-direct-wrapper">
                                 <div class="collapsible-content space-y-3 pt-2">
                                     <div>
                                         <label for="stage2-vis-lanes" class="text-sm font-medium text-gray-600">จำนวนช่อง (สำหรับภาพ)</label>
                                         <input type="number" id="stage2-vis-lanes" value="2" min="1" step="1" class="form-input mt-1 block w-full rounded-md shadow-sm p-2 text-sm">
                                     </div>
                                     <div>
                                          <label for="stage2-width" class="text-sm font-medium text-gray-600">ความกว้างรวม (<span class="unit-label">เมตร</span>)</label>
                                          <input type="number" id="stage2-width" placeholder="ระบุความกว้างรวม" class="form-input mt-1 block w-full rounded-md shadow-sm p-2 text-sm">
                                     </div>
                                 </div>
                            </div>
                        </div>
                    </div>
                     <!-- Median Toggle -->
                    <div class="relative flex items-start pt-2">
                        <div class="flex items-center h-5">
                            <input id="median-toggle" type="checkbox" class="h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500">
                        </div>
                        <div class="ml-3 text-sm">
                            <label for="median-toggle" class="font-medium text-gray-700">มีเกาะกลางถนนที่ปลอดภัย</label>
                        </div>
                    </div>
                </div>

                <!-- Pedestrian Type -->
                <div class="space-y-4 p-4 border rounded-lg bg-gray-50">
                    <h3 class="font-semibold text-lg text-gray-800">ประเภทผู้ข้ามถนน</h3>
                    <div class="mt-2 space-y-2">
                         <label class="flex items-center"><input name="ped-type" type="radio" value="inclusive" class="form-radio" checked> <span id="ped-inclusive-label" class="ml-2"></span></label>
                         <label class="flex items-center"><input name="ped-type" type="radio" value="general" class="form-radio"> <span id="ped-general-label" class="ml-2"></span></label>
                         <label class="flex items-center"><input name="ped-type" type="radio" value="special" class="form-radio"> <span id="ped-special-label" class="ml-2"></span></label>
                         <label class="flex items-center"><input name="ped-type" type="radio" value="custom" class="form-radio"> <span class="ml-2">ระบุเอง</span></label>
                    </div>
                    <div id="custom-speed-div" class="collapsible">
                        <div class="collapsible-content pt-2">
                            <input type="number" id="custom-speed" min="0.1" step="0.1" placeholder="ระบุความเร็ว" class="form-input mt-1 block w-full rounded-md shadow-sm p-2 text-sm">
                            <span id="custom-speed-unit" class="text-sm text-gray-500 ml-2">m/s</span>
                        </div>
                    </div>
                </div>

                <!-- Initial Walk Interval -->
                <div>
                    <label for="walk-interval" class="block text-sm font-medium text-gray-700 mb-2">เวลาเริ่มต้น (Walk Interval)</label>
                    <input type="number" id="walk-interval" value="7" min="4" max="7" step="1" class="form-input block w-full rounded-md shadow-sm p-2" required>
                </div>
                
                <div class="pt-4">
                    <button type="reset" id="reset-btn" class="w-full btn-secondary font-bold py-2 px-4 rounded-lg shadow-md">ล้างค่าทั้งหมด</button>
                </div>
            </form>

            <!-- Right Column: Results & Recommendations -->
            <div class="lg:col-span-2 space-y-8">
                <!-- Result Section -->
                <div>
                    <h2 class="text-xl font-bold text-gray-800 border-b pb-2 mb-4">2. ผลลัพธ์การคำนวณ</h2>
                    <div id="result-container" class="bg-blue-50 p-6 rounded-lg space-y-4 text-center">
                        <!-- Results will be injected here -->
                    </div>
                </div>
                 
                 <!-- Recommendations -->
                <div>
                     <h2 class="text-xl font-bold text-gray-800 border-b pb-2 mb-4">3. คำแนะนำและข้อควรพิจารณา</h2>
                     <ul class="list-disc list-inside space-y-3 text-sm text-gray-700">
                         <li>ผลการคำนวณเป็นค่าแนะนำเบื้องต้น ควรพิจารณาร่วมกับมาตรฐานสากลและข้อบัญญัติท้องถิ่น</li>
                         <li>หากถนนมีเกาะกลางที่ปลอดภัย (กว้างอย่างน้อย 1.8 เมตร หรือ 6 ฟุต) สามารถพิจารณาแบ่งช่วงเวลาข้ามได้</li>
                         <li>ควรมีการตรวจสอบและเก็บข้อมูลความเร็วในการเดินภาคสนาม เพื่อยืนยันความเหมาะสมของค่าที่ใช้</li>
                         <li>การออกแบบเพื่อทุกคน (Inclusive Design) เป็นหัวใจสำคัญ ควรพิจารณาความเร็วในการเดินที่ต่ำ (เช่น 0.9 m/s) เพื่อให้ครอบคลุมผู้ใช้งานทุกกลุ่ม</li>
                         <li>การออกแบบทางกายภาพ เช่น ทางลาดสำหรับรถเข็น และการติดตั้งพื้นผิวต่างสัมผัส (Tactile Paving) เป็นสิ่งสำคัญอย่างยิ่ง</li>
                         <li><strong>แนวทางจากมาตรฐานสากล:</strong>
                            <ul class="list-circle list-inside ml-4 mt-1">
                                <li><strong>MUTCD (สหรัฐฯ):</strong> ใช้ 1.2 m/s เป็นค่าเริ่มต้น</li>
                                <li><strong>FHWA (สหรัฐฯ):</strong> แนะนำให้ลดลงเหลือ 1.0 m/s ในพื้นที่ที่มีผู้สูงอายุหนาแน่น</li>
                                <li><strong>UK DfT (สหราชอาณาจักร):</strong> ใช้ 1.0 m/s หรือ 0.8 m/s ในใจกลางเมือง</li>
                                <li><strong>Austroads (ออสเตรเลีย):</strong> ใช้ 1.0 m/s ทั่วไป และ 0.8 m/s ในใจกลางเมือง</li>
                            </ul>
                         </li>
                     </ul>
                </div>
            </div>
        </div>

        <!-- Calculation Explanation Section -->
        <div class="mt-10 pt-6 border-t col-span-1 lg:col-span-5">
            <details>
                <summary class="text-xl font-bold text-gray-800 cursor-pointer hover:text-blue-700 flex justify-between items-center">
                    <span>หลักการและวิธีการคำนวณ</span>
                    <svg class="w-6 h-6 arrow-down transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path></svg>
                </summary>
                <div class="mt-4 space-y-4 text-gray-700">
                    <p>เอกสารนี้จัดทำขึ้นเพื่ออธิบายหลักการและที่มาของสูตรที่ใช้ในโปรแกรม เพื่อสร้างความเข้าใจพื้นฐานด้านวิศวกรรมจราจรที่เกี่ยวข้องกับการออกแบบสัญญาณไฟสำหรับคนเดินข้าม</p>
                    
                    <h3 class="text-lg font-semibold pt-2 text-gray-800">ภาพรวมของการคำนวณ</h3>
                    <p>ระยะเวลาทั้งหมดที่คนเดินข้ามถนนต้องการ (Total Crossing Time) ประกอบด้วย 2 ส่วนหลัก คือ <strong>"ช่วงเวลาเดิน (Walk Interval)"</strong> และ <strong>"ช่วงเวลาว่างของผู้ข้าม (Pedestrian Clearance Interval)"</strong></p>
                    <div class="bg-gray-100 p-4 my-2 rounded-md text-center text-lg font-mono tracking-wide">เวลารวม = WI + PCI</div>
                    
                    <h3 class="text-lg font-semibold pt-2 text-gray-800">1. ช่วงเวลาเดิน (Walk Interval: WI)</h3>
                    <p>คือช่วงที่สัญญาณไฟเขียวรูปคนเดินปรากฏขึ้น เพื่อให้ผู้ข้ามเริ่มเดิน โดยทั่วไปตามมาตรฐานสากลจะกำหนดไว้ระหว่าง <strong>4 ถึง 7 วินาที</strong></p>
                    
                    <h3 class="text-lg font-semibold pt-2 text-gray-800">2. ช่วงเวลาว่างของผู้ข้าม (PCI)</h3>
                    <p>คือช่วงที่สัญญาณไฟรูปคนเดินกะพริบ เพื่อให้คนที่เดินเป็นคนสุดท้ายข้ามไปถึงอีกฝั่งได้ทัน คำนวณจากสูตร:</p>
                    <div class="bg-gray-100 p-4 my-2 rounded-md text-center text-lg font-mono tracking-wide">PCI = ความกว้างถนน / ความเร็วในการเดิน</div>
                    <ul class="list-disc list-inside space-y-2 pl-4">
                        <li><strong>ความกว้างถนน:</strong> ระยะทางทั้งหมดที่ต้องข้าม (เมตร หรือ ฟุต)</li>
                        <li><strong>ความเร็วในการเดิน:</strong> ใช้ค่าความเร็วของคนที่เดินช้าที่สุดเป็นเกณฑ์เพื่อให้ปลอดภัยสำหรับทุกคน ผลลัพธ์ที่ได้จะถูก **ปัดเศษขึ้น** เสมอ</li>
                    </ul>
                    
                    <div class="mt-4 p-4 border rounded-lg bg-gray-50">
                        <h4 class="font-semibold text-gray-800 mb-2">ตัวอย่างค่าความเร็วในการเดิน (m/s) สำหรับกลุ่มผู้ใช้งานต่างๆ</h4>
                        <div class="overflow-x-auto">
                            <table class="w-full text-sm text-left">
                                <thead class="bg-gray-200">
                                    <tr>
                                        <th class="p-2">กลุ่มผู้ใช้ถนน</th>
                                        <th class="p-2">ความเร็วเฉลี่ย (m/s)</th>
                                        <th class="p-2">อ้างอิง</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    <tr class="border-b">
                                        <td class="p-2">คนทั่วไป</td><td class="p-2">1.2</td><td class="p-2">MUTCD</td>
                                    </tr>
                                    <tr class="border-b"><td class="p-2">ผู้สูงอายุ</td><td class="p-2">0.8 - 0.9</td><td class="p-2">FHWA, Austroads</td></tr>
                                    <tr class="border-b"><td class="p-2">ผู้ใช้รถเข็น</td><td class="p-2">0.9</td><td class="p-2">TRB, UK DfT</td></tr>
                                    <tr class="border-b"><td class="p-2">เด็ก</td><td class="p-2">0.9</td><td class="p-2">AASHTO</td></tr>
                                    <tr><td class="p-2">ผู้พิการทางสายตา</td><td class="p-2">0.8</td><td class="p-2">US Access Board</td></tr>
                                </tbody>
                            </table>
                        </div>
                    </div>


                    <h3 class="text-lg font-semibold pt-2 text-gray-800">ตัวอย่างการคำนวณ</h3>
                    <p>ถนนกว้าง 14 เมตร, ใช้ความเร็วออกแบบ 0.9 m/s, และ WI = 7 วินาที</p>
                    <ol class="list-decimal list-inside space-y-2 pl-4 mt-2">
                        <li><strong>คำนวณหา PCI:</strong>
                            <div class="bg-gray-100 p-3 my-1 rounded-md text-center text-md font-mono">14 ม. / 0.9 m/s = 15.55 วินาที → ปัดขึ้นเป็น <strong>16 วินาที</strong></div>
                        </li>
                        <li><strong>คำนวณหาระยะเวลารวม:</strong>
                            <div class="bg-gray-100 p-3 my-1 rounded-md text-center text-md font-mono">7 วินาที (WI) + 16 วินาที (PCI) = <strong>23 วินาที</strong></div>
                        </li>
                    </ol>
                    
                    <h3 class="text-lg font-semibold pt-2 text-gray-800">กรณีมีเกาะกลางถนน</h3>
                    <p>หากมีเกาะกลางที่ปลอดภัย โปรแกรมจะคำนวณเวลาสำหรับแต่ละช่วงการข้ามแยกกัน เพื่อการจัดการจราจรที่มีประสิทธิภาพยิ่งขึ้น</p>
                </div>
            </details>
        </div>
    </div>

    <script>
    document.addEventListener('DOMContentLoaded', function () {
        // --- DOM Elements ---
        const form = document.getElementById('crossing-form');
        const medianToggle = document.getElementById('median-toggle');
        const resultContainer = document.getElementById('result-container');
        const roadVisual = document.getElementById('road-visual');
        const resetBtn = document.getElementById('reset-btn');
        const customSpeedDiv = document.getElementById('custom-speed-div');
        const customSpeedInput = document.getElementById('custom-speed');
        const pedTypeRadios = document.querySelectorAll('input[name="ped-type"]');
        const unitBtnMeters = document.getElementById('unit-btn-meters');
        const unitBtnFeet = document.getElementById('unit-btn-feet');

        // --- State ---
        let currentUnit = 'meters';

        // --- Constants ---
        const walkingSpeeds = {
            meters: { general: 1.2, inclusive: 0.9, special: 0.6 },
            feet: { general: 4.0, inclusive: 3.0, special: 2.0 }
        };
        const pedLabels = {
            inclusive: "ครอบคลุมทุกคน (ผู้สูงอายุ/เด็ก)",
            general: "ทั่วไป",
            special: "ผู้ที่มีข้อจำกัดพิเศษ (เช่น รถเข็น)"
        }
        const METER_TO_FEET = 3.28084;
        
        // --- Initial Setup ---
        setupInputToggle('stage1');
        setupInputToggle('stage2');
        updateUnitButtons();
        updatePedLabels();
        updateVisualAid();
        calculateAndDisplay(); // Initial calculation on load

        // --- Event Listeners ---
        form.addEventListener('input', () => {
             calculateAndDisplay();
             updateVisualAid();
        });

        resetBtn.addEventListener('click', function(e) {
            e.preventDefault();
            form.reset();
            currentUnit = 'meters'; // Reset state
            // Manually trigger updates after reset
            document.querySelectorAll('input[name="stage1-input-type"]')[0].checked = true;
            document.querySelectorAll('input[name="stage2-input-type"]')[0].checked = true;
            setupInputToggle('stage1'); 
            setupInputToggle('stage2');
            customSpeedDiv.classList.remove('open');
            updateUnitButtons();
            updatePedLabels();
            updateVisualAid(); 
            calculateAndDisplay();
        });

        unitBtnMeters.addEventListener('click', () => handleUnitChange('meters'));
        unitBtnFeet.addEventListener('click', () => handleUnitChange('feet'));

        // --- Functions ---
        
        function setupInputToggle(prefix) {
            const radios = document.querySelectorAll(`input[name="${prefix}-input-type"]`);
            const lanesWrapper = document.getElementById(`${prefix}-lanes-wrapper`);
            const directWrapper = document.getElementById(`${prefix}-direct-wrapper`);

            radios.forEach(radio => {
                radio.addEventListener('change', () => {
                    if (radio.value === 'direct') {
                        directWrapper.classList.add('open');
                        lanesWrapper.classList.remove('open');
                    } else {
                        directWrapper.classList.remove('open');
                        lanesWrapper.classList.add('open');
                    }
                });
            });
            const checkedRadio = document.querySelector(`input[name="${prefix}-input-type"]:checked`);
            if(checkedRadio) checkedRadio.dispatchEvent(new Event('change'));
        }

        function updateUnitButtons() {
            if (currentUnit === 'meters') {
                unitBtnMeters.classList.add('bg-blue-600', 'text-white', 'border-blue-600');
                unitBtnMeters.classList.remove('bg-white', 'text-gray-700', 'border-gray-200');
                unitBtnFeet.classList.add('bg-white', 'text-gray-700', 'border-gray-200');
                unitBtnFeet.classList.remove('bg-blue-600', 'text-white', 'border-blue-600');
            } else {
                unitBtnFeet.classList.add('bg-blue-600', 'text-white', 'border-blue-600');
                unitBtnFeet.classList.remove('bg-white', 'text-gray-700', 'border-gray-200');
                unitBtnMeters.classList.add('bg-white', 'text-gray-700', 'border-gray-200');
                unitBtnMeters.classList.remove('bg-blue-600', 'text-white', 'border-blue-600');
            }
        }
        
        function updatePedLabels() {
            const speedUnit = currentUnit === 'meters' ? 'm/s' : 'ft/s';
            document.querySelectorAll('.unit-label').forEach(label => label.textContent = currentUnit === 'meters' ? 'เมตร' : 'ฟุต');
            document.getElementById('ped-inclusive-label').textContent = `${pedLabels.inclusive} (${walkingSpeeds[currentUnit].inclusive.toFixed(1)} ${speedUnit})`;
            document.getElementById('ped-general-label').textContent = `${pedLabels.general} (${walkingSpeeds[currentUnit].general.toFixed(1)} ${speedUnit})`;
            document.getElementById('ped-special-label').textContent = `${pedLabels.special} (${walkingSpeeds[currentUnit].special.toFixed(1)} ${speedUnit})`;
            document.getElementById('custom-speed-unit').textContent = speedUnit;
        }

        function getWidthAndLanes(prefix) {
            const inputTypeRadio = document.querySelector(`input[name="${prefix}-input-type"]:checked`);
            if (!inputTypeRadio) return { width: 0, lanes: 0 };
            const inputType = inputTypeRadio.value;
            
            if (inputType === 'direct') {
                const widthInput = document.getElementById(`${prefix}-width`);
                const visLanesInput = document.getElementById(`${prefix}-vis-lanes`);
                const width = widthInput ? parseFloat(widthInput.value) || 0 : 0;
                const lanes = visLanesInput ? parseInt(visLanesInput.value) || 1 : 1;
                return { width, lanes };
            } else { // by lanes
                const numLanesInput = document.getElementById(`${prefix}-num-lanes`);
                const laneWidthInput = document.getElementById(`${prefix}-lane-width`);
                const lanes = numLanesInput ? parseInt(numLanesInput.value) || 0 : 0;
                const laneWidth = laneWidthInput ? parseFloat(laneWidthInput.value) || 0 : 0;
                return { width: lanes * laneWidth, lanes };
            }
        }
        
        function calculateAndDisplay() {
            const isMedian = medianToggle.checked;
            const walkInterval = parseFloat(document.getElementById('walk-interval').value) || 7;
            const pedTypeRadio = document.querySelector('input[name="ped-type"]:checked');
            
            if (!pedTypeRadio) {
                resultContainer.innerHTML = `<p class="text-yellow-700">กรุณาเลือกประเภทผู้ข้ามถนน</p>`;
                return;
            }

            const pedType = pedTypeRadio.value;
            let speed;
            let pedTypeText;

            if (pedType === 'custom') {
                speed = parseFloat(customSpeedInput.value) || 0;
                if (speed <= 0) {
                    resultContainer.innerHTML = `<p class="text-yellow-700">กรุณากรอกความเร็วให้ถูกต้อง</p>`;
                    return;
                }
                pedTypeText = 'ที่ระบุเอง';
            } else {
                speed = walkingSpeeds[currentUnit][pedType];
                pedTypeText = pedLabels[pedType];
            }
            
            const unitText = currentUnit === 'meters' ? 'เมตร' : 'ฟุต';
            const speedUnitText = currentUnit === 'meters' ? 'm/s' : 'ft/s';
            
            let htmlResult = `<p class="text-gray-600">ความเร็วในการเดินที่ใช้: <strong class="text-blue-700 text-lg">${speed.toFixed(1)} ${speedUnitText}</strong></p>`;

            const stage1 = getWidthAndLanes('stage1');
            const stage2 = getWidthAndLanes('stage2');

            if (isMedian) {
                if (stage1.width <= 0 || stage2.width <= 0) {
                    resultContainer.innerHTML = `<p class="text-yellow-700">กรุณากรอกข้อมูลความกว้างถนนให้ครบถ้วน</p>`;
                    return;
                }
                const pci1 = Math.ceil(stage1.width / speed);
                const total1 = walkInterval + pci1;
                const pci2 = Math.ceil(stage2.width / speed);
                const total2 = walkInterval + pci2;

                htmlResult += `
                    <div class="text-left space-y-3 mt-4">
                         <div><h4 class="font-bold text-gray-700">ช่วงที่ 1 (ข้าม ${stage1.width.toFixed(1)} ${unitText}):</h4><p class="ml-4">เวลารวม: <strong class="text-blue-700">${total1} วินาที</strong></p></div>
                         <div><h4 class="font-bold text-gray-700">ช่วงที่ 2 (ข้าม ${stage2.width.toFixed(1)} ${unitText}):</h4><p class="ml-4">เวลารวม: <strong class="text-blue-700">${total2} วินาที</strong></p></div>
                    </div>
                    <p class="text-sm text-gray-700 bg-blue-100 p-3 rounded-md mt-4">การข้ามถนนแบบมีเกาะกลางต้องใช้เวลา 2 ช่วง โดยช่วงที่ยาวที่สุดต้องการเวลา ${Math.max(total1, total2)} วินาที สำหรับผู้ข้ามประเภท "${pedTypeText}"</p>`;
            } else {
                const totalWidth = stage1.width + stage2.width;
                if (totalWidth <= 0) {
                     resultContainer.innerHTML = `<p class="text-yellow-700">กรุณากรอกข้อมูลความกว้างถนนให้ครบถ้วน</p>`;
                     return;
                }
                const pci = Math.ceil(totalWidth / speed);
                const totalTime = walkInterval + pci;

                htmlResult += `
                    <div class="my-4 py-4 border-t border-b border-blue-200">
                         <p class="text-lg font-semibold text-gray-800">ระยะเวลาข้ามถนนทั้งหมดที่ต้องการ</p>
                         <p class="text-3xl font-bold text-blue-800">${totalTime} วินาที</p>
                    </div>
                    <p class="text-sm text-gray-700 bg-blue-100 p-3 rounded-md">ระยะเวลา ${totalTime} วินาทีนี้ เพียงพอสำหรับผู้ข้ามประเภท "${pedTypeText}" ในการข้ามถนนกว้าง ${totalWidth.toFixed(1)} ${unitText} ได้อย่างปลอดภัย</p>`;
            }
            
            resultContainer.innerHTML = htmlResult;
        }
        
        function handleUnitChange(newUnit) {
            if (newUnit === currentUnit) return; 

            const factor = newUnit === 'feet' ? METER_TO_FEET : 1 / METER_TO_FEET;

            const inputsToConvert = [
                'stage1-lane-width', 'stage1-width',
                'stage2-lane-width', 'stage2-width',
                'custom-speed'
            ];
            inputsToConvert.forEach(id => {
                const input = document.getElementById(id);
                if (input && input.value) {
                    const currentValue = parseFloat(input.value);
                    if (!isNaN(currentValue)) {
                        input.value = (currentValue * factor).toFixed(2);
                    }
                }
            });
            
            currentUnit = newUnit;
            updateUnitButtons();
            updatePedLabels();
            calculateAndDisplay();
            updateVisualAid();
        }

        function updateVisualAid() {
            roadVisual.innerHTML = ''; // Clear previous visual
            const isMedian = medianToggle.checked;
            
            const stage1 = getWidthAndLanes('stage1');
            const stage2 = getWidthAndLanes('stage2');

            const stage1Div = createLaneSection(stage1.lanes);
            const stage2Div = createLaneSection(stage2.lanes);

            stage1Div.style.flexGrow = stage1.lanes;
            stage2Div.style.flexGrow = stage2.lanes;

            // For left-hand traffic, stage 1 is at the top in this column view
            if (stage1.lanes > 0) roadVisual.appendChild(stage1Div);
            
            if (isMedian) {
                const medianDiv = document.createElement('div');
                medianDiv.className = 'median-island-visual clipped-by-crosswalk';
                roadVisual.appendChild(medianDiv);
            } else if (stage1.lanes > 0 && stage2.lanes > 0) {
                 const divider = document.createElement('div');
                 divider.className = 'center-divider-solid clipped-by-crosswalk';
                 roadVisual.appendChild(divider);
            }

            if (stage2.lanes > 0) roadVisual.appendChild(stage2Div);

            // --- Add Overlay elements if there are lanes ---
            if (stage1.lanes > 0 || stage2.lanes > 0) {
                const crosswalkContainer = document.createElement('div');
                crosswalkContainer.id = 'crosswalk-container';
                roadVisual.appendChild(crosswalkContainer);

                const stripeCount = 7;
                const totalSpace = 100; // Represents 100% of the container's height
                const stripeAndGapHeight = totalSpace / stripeCount;
                const stripeHeight = stripeAndGapHeight * 0.7; // Stripe is 70% of the space
                
                for (let i = 0; i < stripeCount; i++) {
                    const stripe = document.createElement('div');
                    stripe.className = 'crosswalk-stripe';
                    stripe.style.top = `${i * stripeAndGapHeight}%`;
                    stripe.style.height = `${stripeHeight}%`;
                    crosswalkContainer.appendChild(stripe);
                }

                const stopLineLeft = document.createElement('div');
                stopLineLeft.className = 'stop-line-visual';
                stopLineLeft.id = 'stop-line-left';
                roadVisual.appendChild(stopLineLeft);

                const stopLineRight = document.createElement('div');
                stopLineRight.className = 'stop-line-visual';
                stopLineRight.id = 'stop-line-right';
                roadVisual.appendChild(stopLineRight);
            }
        }

        function createLaneSection(numLanes) {
            const section = document.createElement('div');
            section.className = 'traffic-flow clipped-by-crosswalk';
            if (numLanes > 1) {
                for (let i = 0; i < numLanes - 1; i++) {
                    const marking = document.createElement('div');
                    marking.className = 'lane-marking-dashed w-full';
                    section.appendChild(marking);
                }
            }
            if (numLanes < 1) { 
                 return section;
            }
            if (section.childElementCount === 0) {
                 section.innerHTML = '&nbsp;';
            }

            return section;
        }
        
        // Handle custom speed radio button toggle
        pedTypeRadios.forEach(radio => {
            radio.addEventListener('change', (e) => {
                if(e.target.value === 'custom') {
                    customSpeedDiv.classList.add('open');
                } else {
                    customSpeedDiv.classList.remove('open');
                }
            });
        });
    });
    </script>
</body>
</html>
